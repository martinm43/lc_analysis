The following is a summary of the files contained within the 
Naismith analytics folder
###Databases###
nba_data_test.sqlite: main database of program (see 
Naismith_Database_Readme.txt)
###Accessing online data###
nba_api_scoreboard.py: Access stats.nba.com API (nbapy)
###Season Predictions###
main.py: control program for season standings and playoff 
predictions (does not perform Monte Carlo simulation) 
team_indexer.py: Links the team IDs used by the stats.nba.com API 
with standard team IDs using pro_api_teams.csv 
season_games_splitter.py: Based on user input obtain a list of 
known wins and a set of games to be simulated ptsaverages.py: 
calculate team average margins of victories with a user defined 
blowout cutoff and hardcoded 2 pt home advantage 
ratings_calculations.py: use one of the ratings calculations 
methods to produce ratings then used to calc binomial win 
probability monte_carlo_calculations.py: Calculates binomial win 
percentages (0,1) in remaining games to be simulated
###Resources###
pro_api_teams.csv: team stats.nba.com IDs, cities, names, and 
alphabetical 1-30 IDs.
###Queries###
query.sql: file for storing SQLite queries nba_data.sql: flat text 
file dump of main database
###Ratings Calculations###
burke_solver.py: solves for Burkes ratings (NFL expert's stat) of 
teams srscalc.py: calculates the Simple Rating System ratings of 
teams morey.py: binomial win probability calculation methods 
coming_games_Excel.csv: pretty table of games ratings and 
probabilities for display only
###Temporary CSVs###
adj_pts_diff_vector.csv: adjusted net avg points for each tean from 
ptsaverages.py outfile_future_games.csv: future games obtained from 
game splitting in early main steps outfile_wins.csv: total wins for 
each team outfile_mcsims.csv: binomial win percentages for future 
games
###Ratings CSVs###
burke_vector.csv: Burke ratings SRS_vector.csv: SRS ratings
###Monte Carlo Simulation Methods###
loop_monte_carlo.py: Historical simulation method, not fast but can 
determine playoff odds vectorized_monte_carlo.py: Much faster 
method that uses vectorization but also massive amounts of memory 
very fast MC_sim_results_Excel.csv: should be a txt outfile - loop 
sim results
###Database###
dbtools.py: Basic database creation tools using json strgen.py: 
Subscript for generating insertion statements (INSERT INTO)
access_nba_data.py: Assorted time and querying tools for supporting 
analysis
